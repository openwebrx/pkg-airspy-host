From e1fb42aa3f29a88149fc356b44dcf8f717ca08c0 Mon Sep 17 00:00:00 2001
From: hayati ayguen <h_ayguen@web.de>
Date: Thu, 1 Feb 2018 01:46:47 +0100
Subject: [PATCH 09/19] all outputs to stderr allowing to pipe data, e.g. to
 csdr

additionally allow option '-' as filename to option '-r'

Signed-off-by: hayati ayguen <h_ayguen@web.de>
---
 airspy-tools/src/airspy_rx.c | 165 ++++++++++++++++++-----------------
 1 file changed, 84 insertions(+), 81 deletions(-)

diff --git a/airspy-tools/src/airspy_rx.c b/airspy-tools/src/airspy_rx.c
index 1cea6d3..a8ece76 100644
--- a/airspy-tools/src/airspy_rx.c
+++ b/airspy-tools/src/airspy_rx.c
@@ -467,27 +467,27 @@ int rx_callback(airspy_transfer_t* transfer)
 
 static void usage(void)
 {
-	printf("airspy_rx v%s\n", AIRSPY_RX_VERSION);
-	printf("Usage:\n");
-	printf("-r <filename>: Receive data into file\n");
-	printf("-w Receive data into file with WAV header and automatic name\n");
-	printf(" This is for SDR# compatibility and may not work with other software\n");
-	printf("[-s serial_number_64bits]: Open device with specified 64bits serial number\n");
-	printf("[-p packing]: Set packing for samples, \n");
-	printf(" 1=enabled(12bits packed), 0=disabled(default 16bits not packed)\n");
-	printf("[-f frequency_MHz]: Set frequency in MHz between [%lu, %lu] (default %luMHz)\n",
+	fprintf(stderr, "airspy_rx v%s\n", AIRSPY_RX_VERSION);
+	fprintf(stderr, "Usage:\n");
+	fprintf(stderr, "-r <filename>: Receive data into file\n");
+	fprintf(stderr, "-w Receive data into file with WAV header and automatic name\n");
+	fprintf(stderr, " This is for SDR# compatibility and may not work with other software\n");
+	fprintf(stderr, "[-s serial_number_64bits]: Open device with specified 64bits serial number\n");
+	fprintf(stderr, "[-p packing]: Set packing for samples, \n");
+	fprintf(stderr, " 1=enabled(12bits packed), 0=disabled(default 16bits not packed)\n");
+	fprintf(stderr, "[-f frequency_MHz]: Set frequency in MHz between [%lu, %lu] (default %luMHz)\n",
 		FREQ_HZ_MIN / FREQ_ONE_MHZ, FREQ_HZ_MAX / FREQ_ONE_MHZ, DEFAULT_FREQ_HZ / FREQ_ONE_MHZ);
-	printf("[-a sample_rate]: Set sample rate\n");
-	printf("[-t sample_type]: Set sample type, \n");
-	printf(" 0=FLOAT32_IQ, 1=FLOAT32_REAL, 2=INT16_IQ(default), 3=INT16_REAL, 4=U16_REAL, 5=RAW\n");
-	printf("[-b biast]: Set Bias Tee, 1=enabled, 0=disabled(default)\n");
-	printf("[-v vga_gain]: Set VGA/IF gain, 0-%d (default %d)\n", VGA_GAIN_MAX, vga_gain);
-	printf("[-m mixer_gain]: Set Mixer gain, 0-%d (default %d)\n", MIXER_GAIN_MAX, mixer_gain);
-	printf("[-l lna_gain]: Set LNA gain, 0-%d (default %d)\n", LNA_GAIN_MAX, lna_gain);
-	printf("[-g linearity_gain]: Set linearity simplified gain, 0-%d\n", LINEARITY_GAIN_MAX);
-	printf("[-h sensivity_gain]: Set sensitivity simplified gain, 0-%d\n", SENSITIVITY_GAIN_MAX);
-	printf("[-n num_samples]: Number of samples to transfer (default is unlimited)\n");
-	printf("[-d]: Verbose mode\n");
+	fprintf(stderr, "[-a sample_rate]: Set sample rate\n");
+	fprintf(stderr, "[-t sample_type]: Set sample type, \n");
+	fprintf(stderr, " 0=FLOAT32_IQ, 1=FLOAT32_REAL, 2=INT16_IQ(default), 3=INT16_REAL, 4=U16_REAL, 5=RAW\n");
+	fprintf(stderr, "[-b biast]: Set Bias Tee, 1=enabled, 0=disabled(default)\n");
+	fprintf(stderr, "[-v vga_gain]: Set VGA/IF gain, 0-%d (default %d)\n", VGA_GAIN_MAX, vga_gain);
+	fprintf(stderr, "[-m mixer_gain]: Set Mixer gain, 0-%d (default %d)\n", MIXER_GAIN_MAX, mixer_gain);
+	fprintf(stderr, "[-l lna_gain]: Set LNA gain, 0-%d (default %d)\n", LNA_GAIN_MAX, lna_gain);
+	fprintf(stderr, "[-g linearity_gain]: Set linearity simplified gain, 0-%d\n", LINEARITY_GAIN_MAX);
+	fprintf(stderr, "[-h sensivity_gain]: Set sensitivity simplified gain, 0-%d\n", SENSITIVITY_GAIN_MAX);
+	fprintf(stderr, "[-n num_samples]: Number of samples to transfer (default is unlimited)\n");
+	fprintf(stderr, "[-d]: Verbose mode\n");
 }
 
 struct airspy_device* device = NULL;
@@ -497,7 +497,7 @@ BOOL WINAPI
 sighandler(int signum)
 {
 	if (CTRL_C_EVENT == signum) {
-		fprintf(stdout, "Caught signal %d\n", signum);
+		fprintf(stderr, "Caught signal %d\n", signum);
 		do_exit = true;
 		return TRUE;
 	}
@@ -506,7 +506,7 @@ sighandler(int signum)
 #else
 void sigint_callback_handler(int signum) 
 {
-	fprintf(stdout, "Caught signal %d\n", signum);
+	fprintf(stderr, "Caught signal %d\n", signum);
 	do_exit = true;
 }
 #endif
@@ -683,16 +683,16 @@ int main(int argc, char** argv)
 			break;
 
 			default:
-				printf("unknown argument '-%c %s'\n", opt, optarg);
+				fprintf(stderr, "unknown argument '-%c %s'\n", opt, optarg);
 				usage();
 				return EXIT_FAILURE;
 		}
 		
 		if( result != AIRSPY_SUCCESS ) {
-			printf("argument error: '-%c %s' %s (%d)\n", opt, optarg, airspy_error_name(result), result);
+			fprintf(stderr, "argument error: '-%c %s' %s (%d)\n", opt, optarg, airspy_error_name(result), result);
 			usage();
 			return EXIT_FAILURE;
-		}		
+		}
 	}
 
 	if (sample_rate)
@@ -703,7 +703,7 @@ int main(int argc, char** argv)
 	bytes_to_xfer = samples_to_xfer * wav_nb_bits_per_sample * wav_nb_channels / 8;
 
 	if (samples_to_xfer >= SAMPLES_TO_XFER_MAX_U64) {
-		printf("argument error: num_samples must be less than %s/%sMio\n",
+		fprintf(stderr, "argument error: num_samples must be less than %s/%sMio\n",
 				u64toa(SAMPLES_TO_XFER_MAX_U64, &ascii_u64_data1),
 				u64toa((SAMPLES_TO_XFER_MAX_U64/FREQ_ONE_MHZ_U64), &ascii_u64_data2) );
 		usage();
@@ -713,7 +713,7 @@ int main(int argc, char** argv)
 	if( freq ) {
 		if( (freq_hz >= FREQ_HZ_MAX) || (freq_hz < FREQ_HZ_MIN) )
 		{
-			printf("argument error: frequency_MHz=%.6f MHz and shall be between [%lu, %lu[ MHz\n",
+			fprintf(stderr, "argument error: frequency_MHz=%.6f MHz and shall be between [%lu, %lu[ MHz\n",
 							((double)freq_hz/(double)FREQ_ONE_MHZ), FREQ_HZ_MIN/FREQ_ONE_MHZ, FREQ_HZ_MAX/FREQ_ONE_MHZ);
 			usage();
 			return EXIT_FAILURE;
@@ -729,7 +729,7 @@ int main(int argc, char** argv)
 	{
 		if (sample_type_val == AIRSPY_SAMPLE_RAW)
 		{
-			printf("The RAW sampling mode is not compatible with Wave files\n");
+			fprintf(stderr, "The RAW sampling mode is not compatible with Wave files\n");
 			usage();
 			return EXIT_FAILURE;
 		}
@@ -741,66 +741,66 @@ int main(int argc, char** argv)
 		strftime(date_time, DATE_TIME_MAX_LEN, "%Y%m%d_%H%M%S", timeinfo);
 		snprintf(path_file, PATH_FILE_MAX_LEN, "AirSpy_%sZ_%ukHz_IQ.wav", date_time, (uint32_t)(freq_hz/(1000ull)) );
 		path = path_file;
-		printf("Receive wav file: %s\n", path);
-	}	
+		fprintf(stderr, "Receive wav file: %s\n", path);
+	}
 
 	if( path == NULL ) {
-		printf("error: you shall specify at least -r <with filename> or -w option\n");
+		fprintf(stderr, "error: you shall specify at least -r <with filename> or -w option\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if(packing_val == PACKING_MAX) {
-		printf("argument error: packing out of range\n");
+		fprintf(stderr, "argument error: packing out of range\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if(sample_type_val > SAMPLE_TYPE_MAX) {
-		printf("argument error: sample_type out of range\n");
+		fprintf(stderr, "argument error: sample_type out of range\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if(biast_val > BIAST_MAX) {
-		printf("argument error: biast_val out of range\n");
+		fprintf(stderr, "argument error: biast_val out of range\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if(vga_gain > VGA_GAIN_MAX) {
-		printf("argument error: vga_gain out of range\n");
+		fprintf(stderr, "argument error: vga_gain out of range\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if(mixer_gain > MIXER_GAIN_MAX) {
-		printf("argument error: mixer_gain out of range\n");
+		fprintf(stderr, "argument error: mixer_gain out of range\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if(lna_gain > LNA_GAIN_MAX) {
-		printf("argument error: lna_gain out of range\n");
+		fprintf(stderr, "argument error: lna_gain out of range\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if(linearity_gain_val > LINEARITY_GAIN_MAX) {
-		printf("argument error: linearity_gain out of range\n");
+		fprintf(stderr, "argument error: linearity_gain out of range\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if(sensitivity_gain_val > SENSITIVITY_GAIN_MAX) {
-		printf("argument error: sensitivity_gain out of range\n");
+		fprintf(stderr, "argument error: sensitivity_gain out of range\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if( (linearity_gain == true) && (sensitivity_gain == true) )
 	{
-		printf("argument error: linearity_gain and sensitivity_gain are both set (choose only one option)\n");
+		fprintf(stderr, "argument error: linearity_gain and sensitivity_gain are both set (choose only one option)\n");
 		usage();
 		return EXIT_FAILURE;
 	}
@@ -810,36 +810,36 @@ int main(int argc, char** argv)
 		uint32_t serial_number_msb_val;
 		uint32_t serial_number_lsb_val;
 
-		printf("airspy_rx v%s\n", AIRSPY_RX_VERSION);
+		fprintf(stderr, "airspy_rx v%s\n", AIRSPY_RX_VERSION);
 		serial_number_msb_val = (uint32_t)(serial_number_val >> 32);
 		serial_number_lsb_val = (uint32_t)(serial_number_val & 0xFFFFFFFF);
 		if(serial_number)
-			printf("serial_number_64bits -s 0x%08X%08X\n", serial_number_msb_val, serial_number_lsb_val);
-		printf("packing -p %d\n", packing_val);
-		printf("frequency_MHz -f %.6fMHz (%sHz)\n",((double)freq_hz/(double)FREQ_ONE_MHZ), u64toa(freq_hz, &ascii_u64_data1) );
-		printf("sample_type -t %d\n", sample_type_val);
-		printf("biast -b %d\n", biast_val);
+			fprintf(stderr, "serial_number_64bits -s 0x%08X%08X\n", serial_number_msb_val, serial_number_lsb_val);
+		fprintf(stderr, "packing -p %d\n", packing_val);
+		fprintf(stderr, "frequency_MHz -f %.6fMHz (%sHz)\n",((double)freq_hz/(double)FREQ_ONE_MHZ), u64toa(freq_hz, &ascii_u64_data1) );
+		fprintf(stderr, "sample_type -t %d\n", sample_type_val);
+		fprintf(stderr, "biast -b %d\n", biast_val);
 
 		if( (linearity_gain == false) && (sensitivity_gain == false) )
 		{
-			printf("vga_gain -v %u\n", vga_gain);
-			printf("mixer_gain -m %u\n", mixer_gain);
-			printf("lna_gain -l %u\n", lna_gain);
+			fprintf(stderr, "vga_gain -v %u\n", vga_gain);
+			fprintf(stderr, "mixer_gain -m %u\n", mixer_gain);
+			fprintf(stderr, "lna_gain -l %u\n", lna_gain);
 		} else
 		{
 			if( linearity_gain == true)
 			{
-				printf("linearity_gain -g %u\n", linearity_gain_val);
+				fprintf(stderr, "linearity_gain -g %u\n", linearity_gain_val);
 			}
 
 			if( sensitivity_gain == true)
 			{
-				printf("sensitivity_gain -h %u\n", sensitivity_gain_val);
+				fprintf(stderr, "sensitivity_gain -h %u\n", sensitivity_gain_val);
 			}
 		}
 
 		if( limit_num_samples ) {
-			printf("num_samples -n %s (%sM)\n",
+			fprintf(stderr, "num_samples -n %s (%sM)\n",
 							u64toa(samples_to_xfer, &ascii_u64_data1),
 							u64toa((samples_to_xfer/FREQ_ONE_MHZ), &ascii_u64_data2));
 		}
@@ -847,7 +847,7 @@ int main(int argc, char** argv)
 
 	result = airspy_init();
 	if( result != AIRSPY_SUCCESS ) {
-		printf("airspy_init() failed: %s (%d)\n", airspy_error_name(result), result);
+		fprintf(stderr, "airspy_init() failed: %s (%d)\n", airspy_error_name(result), result);
 		return EXIT_FAILURE;
 	}
 
@@ -855,7 +855,7 @@ int main(int argc, char** argv)
 	{
 		result = airspy_open_sn(&device, serial_number_val);
 		if( result != AIRSPY_SUCCESS ) {
-			printf("airspy_open_sn() failed: %s (%d)\n", airspy_error_name(result), result);
+			fprintf(stderr, "airspy_open_sn() failed: %s (%d)\n", airspy_error_name(result), result);
 			airspy_exit();
 			return EXIT_FAILURE;
 		}
@@ -863,7 +863,7 @@ int main(int argc, char** argv)
 	{
 		result = airspy_open(&device);
 		if( result != AIRSPY_SUCCESS ) {
-			printf("airspy_open() failed: %s (%d)\n", airspy_error_name(result), result);
+			fprintf(stderr, "airspy_open() failed: %s (%d)\n", airspy_error_name(result), result);
 			airspy_exit();
 			return EXIT_FAILURE;
 		}
@@ -871,7 +871,7 @@ int main(int argc, char** argv)
 
 	result = airspy_set_sample_type(device, sample_type_val);
 	if (result != AIRSPY_SUCCESS) {
-		printf("airspy_set_sample_type() failed: %s (%d)\n", airspy_error_name(result), result);
+		fprintf(stderr, "airspy_set_sample_type() failed: %s (%d)\n", airspy_error_name(result), result);
 		airspy_close(device);
 		airspy_exit();
 		return EXIT_FAILURE;
@@ -891,7 +891,7 @@ int main(int argc, char** argv)
 		else
 		{
 			free(supported_samplerates);
-			printf("argument error: unsupported sample rate\n");
+			fprintf(stderr, "argument error: unsupported sample rate\n");
 			airspy_close(device);
 			airspy_exit();
 			return EXIT_FAILURE;
@@ -906,7 +906,7 @@ int main(int argc, char** argv)
 
 	result = airspy_set_samplerate(device, sample_rate_val);
 	if (result != AIRSPY_SUCCESS) {
-		printf("airspy_set_samplerate() failed: %s (%d)\n", airspy_error_name(result), result);
+		fprintf(stderr, "airspy_set_samplerate() failed: %s (%d)\n", airspy_error_name(result), result);
 		airspy_close(device);
 		airspy_exit();
 		return EXIT_FAILURE;
@@ -914,7 +914,7 @@ int main(int argc, char** argv)
 
 	if (verbose)
 	{
-		printf("sample_rate -a %d (%f MSPS %s)\n", sample_rate_val, wav_sample_per_sec * 0.000001f, wav_nb_channels == 1 ? "Real" : "IQ");
+		fprintf(stderr, "sample_rate -a %d (%f MSPS %s)\n", sample_rate_val, wav_sample_per_sec * 0.000001f, wav_nb_channels == 1 ? "Real" : "IQ");
 	}
 	
 	result = airspy_board_partid_serialno_read(device, &read_partid_serialno);
@@ -925,7 +925,7 @@ int main(int argc, char** argv)
 			airspy_exit();
 			return EXIT_FAILURE;
 	}
-	printf("Device Serial Number: 0x%08X%08X\n",
+	fprintf(stderr, "Device Serial Number: 0x%08X%08X\n",
 		read_partid_serialno.serial_no[2],
 		read_partid_serialno.serial_no[3]);
 
@@ -933,7 +933,7 @@ int main(int argc, char** argv)
 	{
 		result = airspy_set_packing(device, packing_val);
 		if( result != AIRSPY_SUCCESS ) {
-			printf("airspy_set_packing() failed: %s (%d)\n", airspy_error_name(result), result);
+			fprintf(stderr, "airspy_set_packing() failed: %s (%d)\n", airspy_error_name(result), result);
 			airspy_close(device);
 			airspy_exit();
 			return EXIT_FAILURE;
@@ -942,15 +942,18 @@ int main(int argc, char** argv)
 
 	result = airspy_set_rf_bias(device, biast_val);
 	if( result != AIRSPY_SUCCESS ) {
-		printf("airspy_set_rf_bias() failed: %s (%d)\n", airspy_error_name(result), result);
+		fprintf(stderr, "airspy_set_rf_bias() failed: %s (%d)\n", airspy_error_name(result), result);
 		airspy_close(device);
 		airspy_exit();
 		return EXIT_FAILURE;
 	}
 
-	fd = fopen(path, "wb");
+	if (!strcmp(path,"-"))
+		fd = stdout;
+	else
+		fd = fopen(path, "wb");
 	if( fd == NULL ) {
-		printf("Failed to open file: %s\n", path);
+		fprintf(stderr, "Failed to open file: %s\n", path);
 		airspy_close(device);
 		airspy_exit();
 		return EXIT_FAILURE;
@@ -958,7 +961,7 @@ int main(int argc, char** argv)
 	/* Change fd buffer to have bigger one to store data to file */
 	result = setvbuf(fd , NULL , _IOFBF , FD_BUFFER_SIZE);
 	if( result != 0 ) {
-		printf("setvbuf() failed: %d\n", result);
+		fprintf(stderr, "setvbuf() failed: %d\n", result);
 		airspy_close(device);
 		airspy_exit();
 		return EXIT_FAILURE;
@@ -985,17 +988,17 @@ int main(int argc, char** argv)
 	{
 		result = airspy_set_vga_gain(device, vga_gain);
 		if( result != AIRSPY_SUCCESS ) {
-			printf("airspy_set_vga_gain() failed: %s (%d)\n", airspy_error_name(result), result);
+			fprintf(stderr, "airspy_set_vga_gain() failed: %s (%d)\n", airspy_error_name(result), result);
 		}
 
 		result = airspy_set_mixer_gain(device, mixer_gain);
 		if( result != AIRSPY_SUCCESS ) {
-			printf("airspy_set_mixer_gain() failed: %s (%d)\n", airspy_error_name(result), result);
+			fprintf(stderr, "airspy_set_mixer_gain() failed: %s (%d)\n", airspy_error_name(result), result);
 		}
 
 		result = airspy_set_lna_gain(device, lna_gain);
 		if( result != AIRSPY_SUCCESS ) {
-			printf("airspy_set_lna_gain() failed: %s (%d)\n", airspy_error_name(result), result);
+			fprintf(stderr, "airspy_set_lna_gain() failed: %s (%d)\n", airspy_error_name(result), result);
 		}
 	} else
 	{
@@ -1003,7 +1006,7 @@ int main(int argc, char** argv)
 		{
 			result =  airspy_set_linearity_gain(device, linearity_gain_val);
 			if( result != AIRSPY_SUCCESS ) {
-				printf("airspy_set_linearity_gain() failed: %s (%d)\n", airspy_error_name(result), result);
+				fprintf(stderr, "airspy_set_linearity_gain() failed: %s (%d)\n", airspy_error_name(result), result);
 			}
 		}
 
@@ -1011,14 +1014,14 @@ int main(int argc, char** argv)
 		{
 			result =  airspy_set_sensitivity_gain(device, sensitivity_gain_val);
 			if( result != AIRSPY_SUCCESS ) {
-				printf("airspy_set_sensitivity_gain() failed: %s (%d)\n", airspy_error_name(result), result);
+				fprintf(stderr, "airspy_set_sensitivity_gain() failed: %s (%d)\n", airspy_error_name(result), result);
 			}
 		}
 	}
 
 	result = airspy_start_rx(device, rx_callback, NULL);
 	if( result != AIRSPY_SUCCESS ) {
-		printf("airspy_start_rx() failed: %s (%d)\n", airspy_error_name(result), result);
+		fprintf(stderr, "airspy_start_rx() failed: %s (%d)\n", airspy_error_name(result), result);
 		airspy_close(device);
 		airspy_exit();
 		return EXIT_FAILURE;
@@ -1026,13 +1029,13 @@ int main(int argc, char** argv)
 
 	result = airspy_set_freq(device, freq_hz);
 	if( result != AIRSPY_SUCCESS ) {
-		printf("airspy_set_freq() failed: %s (%d)\n", airspy_error_name(result), result);
+		fprintf(stderr, "airspy_set_freq() failed: %s (%d)\n", airspy_error_name(result), result);
 		airspy_close(device);
 		airspy_exit();
 		return EXIT_FAILURE;
 	}
 
-	printf("Stop with Ctrl-C\n");
+	fprintf(stderr, "Stop with Ctrl-C\n");
 
 	average_rate = (float) wav_sample_per_sec;
 
@@ -1044,7 +1047,7 @@ int main(int argc, char** argv)
 		float average_rate_now = average_rate * 1e-6f;
 		sprintf(str, "%2.3f", average_rate_now);
 		average_rate_now = 9.5f;
-		printf("Streaming at %5s MSPS\n", str);
+		fprintf(stderr, "Streaming at %5s MSPS\n", str);
 		if ((limit_num_samples == true) && (bytes_to_xfer == 0))
 			do_exit = true;
 		else
@@ -1054,30 +1057,30 @@ int main(int argc, char** argv)
 	result = airspy_is_streaming(device);	
 	if (do_exit)
 	{
-		printf("\nUser cancel, exiting...\n");
+		fprintf(stderr, "\nUser cancel, exiting...\n");
 	} else {
-		printf("\nExiting...\n");
+		fprintf(stderr, "\nExiting...\n");
 	}
 	
 	gettimeofday(&t_end, NULL);
 	time_diff = TimevalDiff(&t_end, &t_start);
-	printf("Total time: %5.4f s\n", time_diff);
+	fprintf(stderr, "Total time: %5.4f s\n", time_diff);
 	if (rate_samples > 0)
 	{
-		printf("Average speed %2.4f MSPS %s\n", (global_average_rate * 1e-6f / rate_samples), (wav_nb_channels == 2 ? "IQ" : "Real"));
+		fprintf(stderr, "Average speed %2.4f MSPS %s\n", (global_average_rate * 1e-6f / rate_samples), (wav_nb_channels == 2 ? "IQ" : "Real"));
 	}
 	
 	if(device != NULL)
 	{
 		result = airspy_stop_rx(device);
 		if( result != AIRSPY_SUCCESS ) {
-			printf("airspy_stop_rx() failed: %s (%d)\n", airspy_error_name(result), result);
+			fprintf(stderr, "airspy_stop_rx() failed: %s (%d)\n", airspy_error_name(result), result);
 		}
 
 		result = airspy_close(device);
 		if( result != AIRSPY_SUCCESS ) 
 		{
-			printf("airspy_close() failed: %s (%d)\n", airspy_error_name(result), result);
+			fprintf(stderr, "airspy_close() failed: %s (%d)\n", airspy_error_name(result), result);
 		}
 		
 		airspy_exit();
@@ -1107,6 +1110,6 @@ int main(int argc, char** argv)
 		fclose(fd);
 		fd = NULL;
 	}
-	printf("done\n");
+	fprintf(stderr, "done\n");
 	return exit_code;
 }
-- 
2.20.1

